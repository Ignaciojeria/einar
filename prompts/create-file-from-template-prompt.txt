Im using golang cobra cli and i have next function allocated in cmd/utils/copy_directory.go :
package utils

import (
	"fmt"
	"os"
	"path/filepath"
)

func CopyDirectory(srcDir string, dstDir string, project string) error {
	entries, err := os.ReadDir(srcDir)
	if err != nil {
		return fmt.Errorf("error reading source directory: %v", err)
	}

	err = os.MkdirAll(dstDir, os.ModePerm)
	if err != nil {
		return fmt.Errorf("error creating destination directory: %v", err)
	}

	for _, entry := range entries {
		srcPath := filepath.Join(srcDir, entry.Name())
		dstPath := filepath.Join(dstDir, entry.Name())

		fileInfo, err := entry.Info()
		if err != nil {
			return fmt.Errorf("error retrieving file info: %v", err)
		}

		if fileInfo.IsDir() {
			err = CopyDirectory(srcPath, dstPath, project)
			if err != nil {
				return err
			}
		} else {
			err = CopyFile(srcPath, dstPath, project)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

When the cobra binary is generated, the binary clones next to it a folder called "einar-cli-template" and inside that folder I have a file called .einar.template.json that has the following structure:
{
    "config_template": {
        "description": "Config template allow you modify einar default config keys by your custom config keys allocated on your repository template",
        "replace_config_key": [
            {
                "einar_config_key": "PORT",
                "custom_config_key": "APPLICATION_PORT"
            }
        ]
    },
    "base_template": {
        "description": "Base template allow you copy base files based on your private/public github account inside your einar project when starts",
        "folders": [
            {
                "replace_holders": [
                    "${project}"
                ],
                "source_dir": "helmchart",
                "destination_dir": "helmchart"
            }
        ],
        "files": [
            {
                "type": "file",
                "replace_holders": [
                     "${project}"
                ],
                "source_dir": "einar-cli-template/.environment",
                "destination_dir": ".env"
            }
        ]
    }
}

for give you more context y have next function for copy files allocated in cmd/utils/copy_file.go :

import (
	"fmt"
	"io"
	"os"
)

func CopyFile(srcFile string, dstFile string, project string) error {
	in, err := os.Open(srcFile)
	if err != nil {
		return fmt.Errorf("error opening source file: %v", err)
	}
	defer in.Close()

	out, err := os.Create(dstFile)
	if err != nil {
		return fmt.Errorf("error creating destination file: %v", err)
	}
	defer out.Close()

	_, err = io.Copy(out, in)
	if err != nil {
		return fmt.Errorf("error copying file content: %v", err)
	}

	err = out.Sync()
	if err != nil {
		return fmt.Errorf("error syncing destination file: %v", err)
	}

	// Replace "${project}" placeholder in the copied file
	err = replacePlaceholder(dstFile, "${project}", project)
	if err != nil {
		return fmt.Errorf("error replacing placeholder in file: %v", err)
	}

	return nil
}

and im using that function from another one function allocated in cmd/base/create_version.go :

package base

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
)

func CreateVersion(project string) error {
	// Obtain the binary's path
	binaryPath, err := os.Executable()
	if err != nil {
		return fmt.Errorf("error obtaining binary path: %v for project %v", err, project)
	}

	// Construct the source file's path relative to the binary
	sourceVersionFilePath := filepath.Join(filepath.Dir(binaryPath), "app", "base", "version", ".version")

	// Define the destination path
	versionPath := filepath.Join(".version")

	// Read the version file content
	versionContentBytes, err := ioutil.ReadFile(sourceVersionFilePath)
	if err != nil {
		return fmt.Errorf("error reading version file: %v for project %v", err, project)
	}

	// Write the version file to the destination
	err = ioutil.WriteFile(versionPath, versionContentBytes, 0644)
	if err != nil {
		return fmt.Errorf("error writing version file: %v for project %v", err, project)
	}

	fmt.Printf(".version file generated successfully at %s.\n", versionPath)
	return nil
}


is possible read "files" list allocated in "base_template" of json struct provided to copty einar/einar-cli-template/.environment to .env from command when this will executed
and refactor function called "CreateVersion" to a generic one that iterate over json file provided to create files?