Im using golang cobra library and i have functions like next : 
package base

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
)

func CreateContainer(project string) error {
	// Read the content of the source config.go file
	sourceConfigPath := "app/shared/archetype/container/container.go"
	configContentBytes, err := ioutil.ReadFile(sourceConfigPath)
	if err != nil {
		err := fmt.Errorf("error reading source config.go file at %s: %s", sourceConfigPath, err)
		fmt.Println(err)
		return err
	}

	configContent := string(configContentBytes)

	// Create the destination config directory
	configDir := filepath.Join(project, "app/shared/archetype/container")
	err = os.MkdirAll(configDir, 0755)
	if err != nil {
		return fmt.Errorf("error creating container directory: %v", err)
	}

	// Write the content to the destination config.go file
	configPath := filepath.Join(configDir, "container.go")
	err = ioutil.WriteFile(configPath, []byte(configContent), 0644)
	if err != nil {
		err := fmt.Errorf("error writing container file: %v", err)
		fmt.Println(err)
		return err
	}

	fmt.Printf("container file generated successfully at %s.\n", configPath)
	return nil
}
i want to create a new function called CreateEnvironment that creates .env file and read values from cmd/base/environment/.environment

this is an example of .environment file : 

PORT = 8080
COUNTRY = CL
DD_SERVICE = ${project}
DD_VERSION = 1.0

and this is and example of init function : 

package cmd

import (
	"archetype/cmd/base"
	"fmt"

	"github.com/spf13/cobra"
)

type Installation struct {
	Name    string
	Library string
}

var project string

var dependencies_beta []string = []string{
	"github.com/joho/godotenv@v1.5.1",
	"github.com/rs/zerolog@v1.29.1",
	"github.com/go-chi/chi@v1.5.4",
}

var available_installations_beta = []Installation{
	{
		Name:    "resty",
		Library: "github.com/go-resty/resty/v2@v2.7.0",
	},
}

// initCmd represents the init command
var initCmd = &cobra.Command{
	Use:   "init",
	Short: "Initialize a new Go module",
	Run:   runInitCmd,
}

func runInitCmd(cmd *cobra.Command, args []string) {
	if err := base.CreateRootDirectory(project); err != nil {
		return
	}
	if err := base.CreateMainFile(project); err != nil {
		return
	}
	if err := base.InitializeGoModule(project, dependencies_beta); err != nil {
		return
	}
	if err := base.CreateConfiguration(project); err != nil {
		return
	}
	if err := base.CreateCiFile(project); err != nil {
		return
	}
	if err := base.CreateContainer(project); err != nil {
		return
	}
}

var installCmd = &cobra.Command{
	Use:   "install",
	Short: "Install command for Einar",
	Long:  `This command allows you to install various components.`,
	Run: func(cmd *cobra.Command, args []string) {
		fmt.Println("Specify a subcommand")
	},
}

func init() {
	rootCmd.AddCommand(initCmd)
	initCmd.Flags().StringVarP(&project, "name", "n", "", "Name of the project")
	initCmd.MarkFlagRequired("name")

	installCmd.AddCommand(firestoreCmd)
}

is possible when i run einar init -n example_project create .env file with DD_SERVICE=example_project ?
